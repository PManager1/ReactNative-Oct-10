{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jay/Desktop/ScrapeTools/WORKING/ExpoApps/myNewProject/screens/LoginScreen.tsx\";\n\nimport React from 'react';\nimport Form from \"../forms/Form\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var handleResult = function handleResult(result) {\n    return _regeneratorRuntime.async(function handleResult$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(result.ok && result.data)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(setToken(result.data.auth_token));\n\n          case 3:\n            navigation.navigate('Home');\n            _context.next = 11;\n            break;\n\n          case 6:\n            if (!(result.status === 401)) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new Error('Invalid login.');\n\n          case 10:\n            throw new Error('Something went wrong.');\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Form, {\n    buttonText: \"Submit\",\n    fields: {\n      email: {\n        label: 'Email',\n        inputProps: {\n          keyboardType: 'email-address'\n        }\n      },\n      password: {\n        label: 'Password',\n        inputProps: {\n          secureTextEntry: true\n        }\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default LoginScreen;","map":{"version":3,"sources":["/Users/jay/Desktop/ScrapeTools/WORKING/ExpoApps/myNewProject/screens/LoginScreen.tsx"],"names":["React","Form","LoginScreen","navigation","handleResult","result","ok","data","setToken","auth_token","navigate","status","Error","email","label","inputProps","keyboardType","password","secureTextEntry"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAEpC,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,kBACbA,MAAM,CAACC,EAAP,IAAaD,MAAM,CAACE,IADP;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAETC,QAAQ,CAACH,MAAM,CAACE,IAAP,CAAYE,UAAb,CAFC;;AAAA;AAGfN,YAAAA,UAAU,CAACO,QAAX,CAAoB,MAApB;AAHe;AAAA;;AAAA;AAAA,kBAINL,MAAM,CAACM,MAAP,KAAkB,GAJZ;AAAA;AAAA;AAAA;;AAAA,kBAKT,IAAIC,KAAJ,CAAU,gBAAV,CALS;;AAAA;AAAA,kBAOT,IAAIA,KAAJ,CAAU,uBAAV,CAPS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAYF,SACE,oBAAC,IAAD;AAEE,IAAA,UAAU,EAAC,QAFb;AAGE,IAAA,MAAM,EAAE;AACNC,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,OADF;AAELC,QAAAA,UAAU,EAAE;AACVC,UAAAA,YAAY,EAAE;AADJ;AAFP,OADD;AAONC,MAAAA,QAAQ,EAAE;AACRH,QAAAA,KAAK,EAAE,UADC;AAERC,QAAAA,UAAU,EAAE;AACVG,UAAAA,eAAe,EAAE;AADP;AAFJ;AAPJ,KAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAoBD,CAlCD;;AAoCA,eAAehB,WAAf","sourcesContent":["import React from 'react';\nimport Form from '../forms/Form';\n// import { login } from '../api/authentication';\n\nconst LoginScreen = ({ navigation }) => {\n\n    const handleResult = async (result) => {\n        if (result.ok && result.data) {\n          await setToken(result.data.auth_token);\n          navigation.navigate('Home');\n        } else if (result.status === 401) {\n          throw new Error('Invalid login.');\n        } else {\n          throw new Error('Something went wrong.');\n        }\n      };\n\n      \n  return (\n    <Form\n    //   action={login}\n      buttonText=\"Submit\"\n      fields={{\n        email: {\n          label: 'Email',\n          inputProps: {\n            keyboardType: 'email-address',\n          },\n        },\n        password: {\n          label: 'Password',\n          inputProps: {\n            secureTextEntry: true,\n          },\n        },\n      }}\n    />\n  );\n};\n\nexport default LoginScreen;"]},"metadata":{},"sourceType":"module"}