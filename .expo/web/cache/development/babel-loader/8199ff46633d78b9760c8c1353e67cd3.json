{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/jay/Desktop/ScrapeTools/WORKING/ExpoApps/myNewProject/screens/LoginScreen.tsx\";\n\nimport React from 'react';\nimport Form from \"../forms/Form\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar LoginScreen = function LoginScreen() {\n  var handleResult = function handleResult(result) {\n    return _regeneratorRuntime.async(function handleResult$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(result.ok && result.data)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(setToken(result.data.auth_token));\n\n          case 3:\n            navigation.navigate('Home');\n            _context.next = 11;\n            break;\n\n          case 6:\n            if (!(result.status === 401)) {\n              _context.next = 10;\n              break;\n            }\n\n            throw new Error('Invalid login.');\n\n          case 10:\n            throw new Error('Something went wrong.');\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Form, {\n    afterSubmit: handleResult,\n    buttonText: \"Submit\",\n    fields: {\n      email: {\n        label: 'Email',\n        inputProps: {\n          keyboardType: 'email-address'\n        }\n      },\n      password: {\n        label: 'Password',\n        inputProps: {\n          secureTextEntry: true\n        }\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  });\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 15\n  },\n  error: {\n    marginBottom: 20,\n    height: 17.5\n  }\n});","map":{"version":3,"sources":["/Users/jay/Desktop/ScrapeTools/WORKING/ExpoApps/myNewProject/screens/LoginScreen.tsx"],"names":["React","Form","LoginScreen","handleResult","result","ok","data","setToken","auth_token","navigation","navigate","status","Error","email","label","inputProps","keyboardType","password","secureTextEntry","styles","StyleSheet","create","container","flex","alignItems","justifyContent","marginBottom","error","height"],"mappings":";;;;;AAEA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,IAAP;;;AAOI,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAEtB,MAAMC,YAAY,GAAG,SAAfA,YAAe,CAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,kBACbA,MAAM,CAACC,EAAP,IAAaD,MAAM,CAACE,IADP;AAAA;AAAA;AAAA;;AAAA;AAAA,6CAETC,QAAQ,CAACH,MAAM,CAACE,IAAP,CAAYE,UAAb,CAFC;;AAAA;AAGfC,YAAAA,UAAU,CAACC,QAAX,CAAoB,MAApB;AAHe;AAAA;;AAAA;AAAA,kBAINN,MAAM,CAACO,MAAP,KAAkB,GAJZ;AAAA;AAAA;AAAA;;AAAA,kBAKT,IAAIC,KAAJ,CAAU,gBAAV,CALS;;AAAA;AAAA,kBAOT,IAAIA,KAAJ,CAAU,uBAAV,CAPS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAArB;;AAWE,SACE,oBAAC,IAAD;AAEE,IAAA,WAAW,EAAET,YAFf;AAGE,IAAA,UAAU,EAAC,QAHb;AAIE,IAAA,MAAM,EAAE;AACNU,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE,OADF;AAELC,QAAAA,UAAU,EAAE;AACVC,UAAAA,YAAY,EAAE;AADJ;AAFP,OADD;AAONC,MAAAA,QAAQ,EAAE;AACRH,QAAAA,KAAK,EAAE,UADC;AAERC,QAAAA,UAAU,EAAE;AACVG,UAAAA,eAAe,EAAE;AADP;AAFJ;AAPJ,KAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAsBT,CAnCG;;AAqCJ,eAAehB,WAAf;AAEA,IAAMiB,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC7BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,QAHP;AAITC,IAAAA,YAAY,EAAE;AAJL,GADkB;AAO7BC,EAAAA,KAAK,EAAE;AACLD,IAAAA,YAAY,EAAE,EADT;AAELE,IAAAA,MAAM,EAAE;AAFH;AAPsB,CAAlB,CAAf","sourcesContent":["// Bring in action from api etc here. \n\nimport React, { useState } from 'react';\nimport Form from '../forms/Form';\n// import { login } from '../api/authentication';\n// import { setToken } from '../api/token';\n\nimport { Text, TextInput, View, StyleSheet } from 'react-native';\n\n// const LoginScreen = ({ navigation }) => {\n    const LoginScreen = () => {   \n        \n        const handleResult = async (result) => {\n            if (result.ok && result.data) {\n              await setToken(result.data.auth_token);\n              navigation.navigate('Home');\n            } else if (result.status === 401) {\n              throw new Error('Invalid login.');\n            } else {\n              throw new Error('Something went wrong.');\n            }\n          };\n\n          return (\n            <Form\n            //   action={login}\n              afterSubmit={handleResult}\n              buttonText=\"Submit\"\n              fields={{\n                email: {\n                  label: 'Email',\n                  inputProps: {\n                    keyboardType: 'email-address',\n                  },\n                },\n                password: {\n                  label: 'Password',\n                  inputProps: {\n                    secureTextEntry: true,\n                  },\n                },\n              }}\n            />\n          );\n        \n};\n\nexport default LoginScreen;\n\nconst styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: 'center',\n      justifyContent: 'center',\n      marginBottom: 15,\n    },\n    error: {\n      marginBottom: 20,\n      height: 17.5,\n    },\n  });"]},"metadata":{},"sourceType":"module"}